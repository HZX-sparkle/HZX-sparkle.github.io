[{"title":"Markdown学习日记","url":"/2022/11/08/My-First-Post/","content":"Markdown\nMarkdown是一种轻量级标记语言，排版语法简洁，让人们更多地关注内容本身而非排版。它使用易读易写的纯文本格式编写文档，可与HTML混编，可导出 HTML、PDF 以及本身的 .md 格式的文件。因简洁、高效、易读、易写，Markdown被大量使用，如Github、Wikipedia、简书等。\n\nMarkdown基础语法\n标题语法要创建标题，可在句子或单词前加“#”号，“#”号的多少代表标题的等级。\n\n如#### 四级标题将显示成\n四级标题\ntips最好在#和标题之间加一个空格，以方便兼容\n段落语法要创建段落，请使用空白行将一行或多行文本进行分隔。tips不要用空格（spaces）或制表符（ tabs）缩进段落。\n\n\n\n✅ Do this\n❌ Don’t do this\n\n\n\nDon&#39;t put tabs or spaces in front of your paragraphs.\n  This can result in unexpected formatting problems. Don&#39;t add tabs or spaces in front of paragraphs.\n\n\n换行语法在一行的末尾添加两个或多个空格，然后按回车键,即可创建一个换行(&lt;br&gt;)tips几乎每个 Markdown 应用程序都支持两个或多个空格进行换行，称为 结尾空格（trailing whitespace) 的方式，但这是有争议的，因为很难在编辑器中直接看到空格，并且很多人在每个句子后面都会有意或无意地添加两个空格。由于这个原因，你可能要使用除结尾空格以外的其它方式来换行。幸运的是，几乎每个 Markdown 应用程序都支持另一种换行方式：HTML 的 &lt;br&gt; 标签。为了兼容性，请在行尾添加“结尾空格”或 HTML 的 &lt;br&gt; 标签来实现换行。还有两种其他方式我并不推荐使用。CommonMark 和其它几种轻量级标记语言支持在行尾添加反斜杠 (\\) 的方式实现换行，但是并非所有 Markdown 应用程序都支持此种方式，因此从兼容性的角度来看，不推荐使用。并且至少有两种轻量级标记语言支持无须在行尾添加任何内容，只须键入回车键（return）即可实现换行。\n强调语法要强调时，可用粗体或斜体两种方式，也可同时加粗加斜，**粗体**渲染成粗体*斜体*渲染成斜体***粗加斜***渲染成粗加斜tips虽然还有其他的方式进行强调，但为了兼容考虑，最好使用加*号的方法\n引用语法要创建块引用，请在段落前添加一个 &gt; 符号。\n&gt; Dorothy followed her through many of the beautiful rooms in her castle.\n渲染效果如下所示：\n\nDorothy followed her through many of the beautiful rooms in her castle.\n\n多个段落的块引用块引用可以包含多个段落。为段落之间的空白行添加一个 &gt; 符号。\n&gt; Dorothy followed her through many of the beautiful rooms in her castle.&gt;&gt; The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.\n渲染效果如下：\n\nDorothy followed her through many of the beautiful rooms in her castle.\nThe Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.\n\n嵌套块引用块引用可以嵌套。在要嵌套的段落前添加一个 &gt;&gt; 符号。\n&gt; Dorothy followed her through many of the beautiful rooms in her castle.&gt;&gt;&gt; The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.\n渲染效果如下：\n\nDorothy followed her through many of the beautiful rooms in her castle.\n\nThe Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.\n\n\n带有其它元素的块引用块引用可以包含其他 Markdown 格式的元素。并非所有元素都可以使用，你需要进行实验以查看哪些元素有效。\n&gt; #### The quarterly results look great!&gt;&gt; - Revenue was off the chart.&gt; - Profits were higher than ever.&gt;&gt;  *Everything* is going according to **plan**.\n渲染效果如下：\n\nThe quarterly results look great!\nRevenue was off the chart.\nProfits were higher than ever.\n\nEverything is going according to plan.\n\n列表语法将多个条目组织成有序或无序列表\n有序列表创建有序列表，只需在数字后面加上英文句点即可，数字也无需按顺序排列，只需以1起始，如\n1.2.3.\n\n将显示成\n\n第一项\n\n第二项\n\n第三项\n\n\n无序列表创建一个无序列表，只需在每个列表项前加- ,*或+即可，如\n- one- two- three\n\n将显示成\n\none\ntwo\nthree\n\n嵌套列表在列表中，除了文字，我们还能插入其他的东西，只需在其之前添加四个空格键或者一个tab键即可。如文字\n1. first thing2. second thing\tthe other thing3. third thing\n\n将表示成\n\nfirst thing\nsecond thing the other thing\nthird thing\n\n引用块\n1. first thing2. second thing\t&gt;the other thing3. third thing\n\n将表示成\n\nfirst thing\nsecond thing\nthe other thing\n\n\nthird thing\n\n代码块（通常需要添加8个空格或2个tab键）\n1.  Open the file.2.  Find the following code block on line 21:        &lt;html&gt;          &lt;head&gt;            &lt;title&gt;Test&lt;/title&gt;          &lt;/head&gt;3.  Update the title to match the name of your website.\n\n将表示成\n\n Open the file.\n\nFind the following code block on line 21:\n &lt;html&gt;\n   &lt;head&gt;\n     &lt;title&gt;Test&lt;/title&gt;\n   &lt;/head&gt;\n\n\n Update the title to match the name of your website.\n\n\n代码语法如果想将单词或语段显示成代码，可将其包含在反引号（`）中。如\n`word`\n\n将表示成word\n转义反引号如果想让代码中出现反引号，可以将这段代码用双反引号包裹。如\n``这是一个带`的代码``\n\n将表示成这是一个带`的代码\n代码块如果想创建一个代码块，可以将代码的每一行至少缩进四个空格或一个tab键如\ninclude &lt;stdio.h&gt;int main()&#123;printf(&quot;Hello World!&quot;);return 0;&#125;\n\n将表示成    include &lt;stdio.h&gt;    int main()    {    printf(“Hello World!”);    return 0;    }\n这种方法除了在列表中使用之外可能有些麻烦，所以我们还可以将代码块包裹在三个反引号或者三个波浪号之间来创建代码块。如\n~~~代码~~~\n\n将表示成\n代码\n\n\n\n分割线语法要添加一条分割线，只需使用三个星号（***）、破折号（---）或者下划线（___）即可，渲染结果如下，\n\ntips\n为了兼容性，我们需要在分割线上下添加空白行。\n链接语法要添加链接，链接文本放在中括号内，链接地址放在后面的括号中，链接title可选。超链接Markdown语法代码：[超链接显示名](超链接地址 &quot;超链接title&quot;)，如\n这是一个链接 [Markdown语法](https://markdown.com.cn)。\n\n渲染效果如下：这是一个链接 Markdown语法。\n给链接增加title链接title是鼠标悬停在链接上时将出现的文字，要增加这样的效果，我们只需在链接后用引号添加链接title，同时用空格将两者分隔。如\n链接 [Markdown语法](https://markdown.com.cn &quot;come on, try out!&quot;)。\n\n将渲染成：链接 Markdown语法。\n网址和email地址将url和email地址用尖括号包裹即可将其变为链接。如\n&lt;https://hzx-sparkle.github.io/&gt;&lt;2841287903@qq.com&gt;\n\n将渲染成https://hzx-sparkle.github.io/&#50;&#x38;&#52;&#x31;&#50;&#56;&#x37;&#x39;&#48;&#51;&#64;&#x71;&#x71;&#x2e;&#99;&#x6f;&#x6d;\n带格式化的链接使链接带上强调，加斜，代码块等效果，与正常文本没有什么区别，只是需要注意一点，即变成代码块时，需要在方括号里加反引号。\nI love supporting the **[EFF](https://eff.org)**.This is the *[Markdown Guide](https://www.markdownguide.org)*.See the section on [`code`](#code).\n\n将渲染成I love supporting the EFF.This is the Markdown Guide.See the section on code.\ntips为了更好的兼容，尽量用%20代替空格。\n\n\n\n✅ Do this\n❌ Don’t do this\n\n\n\n[link](https://www.example.com/my%20great%20page)\n[link](https://www.example.com/my great page)\n\n\n图片语法要添加图像，请使用感叹号 (!), 然后在方括号增加替代文本，图片链接放在圆括号里，括号里的链接后可以增加一个可选的图片标题文本。插入图片Markdown语法代码：![图片alt](图片链接 &quot;图片title&quot;)。\n![avatar](https://cdn.staticaly.com/gh/HZX-sparkle/image-hosting@master/20221108/avatar.46usqyain9s0.webp &quot;avatar&quot;)\n\n渲染效果如下，\n\n图片链接给图片增加链接，可将图像的Markdown 括在方括号中，然后将链接添加在圆括号中。\n[![这是图片](E:\\20220\\Pictures\\Saved Pictures\\logo1.png &quot;logo&quot;)](https://hzx-sparkle.github.io/)\n\n渲染效果如下，![这是图片](E:\\20220\\Pictures\\Saved Pictures\\logo1.png “logo”)\n转义字符语法要显示原本用于格式化 Markdown 文档的字符，请在字符前面添加反斜杠字符 \\ 。\n\\* Without the backslash, this would be a bullet in an unordered list.\n\n渲染效果如下：\n* Without the backslash, this would be a bullet in an unordered list.\n可做转义的字符以下列出的字符都可以通过使用反斜杠字符从而达到转义目的。\n\n\n\nCharacter\nName\n\n\n\n\\\nbackslash\n\n\n`\nbacktick (see also escaping backticks in code)\n\n\n*\nasterisk\n\n\n_\nunderscore\n\n\n{ }\ncurly braces\n\n\n[ ]\nbrackets\n\n\n( )\nparentheses\n\n\n#\npound sign\n\n\n+\nplus sign\n\n\n-\nminus sign (hyphen)\n\n\n.\ndot\n\n\n!\nexclamation mark\n\n\n|\npipe (see also escaping pipe in tables)\n\n\n","tags":["markdown"]},{"title":"Hello World","url":"/2022/11/07/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"matu22级C语言期中考试","url":"/2022/11/25/matu22%E7%BA%A7C%E8%AF%AD%E8%A8%80%E6%9C%9F%E4%B8%AD%E8%80%83%E8%AF%95/","content":"c-1-prime求指定范围之内的素数问题描述：输入2个空格分隔的整数m和n，求这个2个数之间的所有素数并输出。要求输出不包含m和n，且输出数据用空格分隔(包括最后1个数据输出后也要输出空格）。任何不合法是输入输出”error”。\n#include &lt;stdio.h&gt;#include &lt;math.h&gt;int isPrime(int n)&#123;\tif(n&lt;=1) return 0;\t\tif(n==2||n==3)&#123;\t\treturn 1;\t&#125;\t\t\tif(n%6!=1&amp;&amp;n%6!=5)&#123;\t\treturn 0;\t&#125;\t\tint s=(int)sqrt(1.0*n);\tfor (int i=5;i&lt;=s;i=i+6)&#123;\t\tif(n%i==0||n%(i+2)==0)&#123;\t\t\treturn 0;\t\t&#125;\t&#125;\t\treturn 1;&#125;int main()&#123;\tint m,n;\tint input=scanf(&quot;%d %d&quot;,&amp;m,&amp;n); //判断输入是否正确（这里太苟了）\tif(m&lt;=1&amp;&amp;n&lt;=1||m==n||input!=2)&#123;\t\tprintf(&quot;error&quot;);\t\treturn 0;\t&#125;\t\tint max,min;\tif(m&lt;n)&#123;\t\tmax=n;\t\tmin=m;\t&#125;else&#123;\t\tmax=m;\t\tmin=n;\t&#125;\t\tfor(int i=min+1;i&lt;max;i++)&#123;\t\tif(isPrime(i)==1)&#123;\t\t\tprintf(&quot;%d &quot;,i);\t\t&#125;\t&#125;\t\treturn 0;&#125;\n字符串逆序输出输入一个字符串，要求按相反的顺序输出各个字符。例如，输入为AbcD，则输出为DcbA。提示：这个题与习题4.1类似，但需注意的是：存储要输入的字符串的字符数组的长度要足够大；如果输入字符串过长，对应存储的字符数组是否会越界。可以考虑实现变长数组。\n输入输出格式要求：    输入格式：string回车    输出格式：gnirts例如：输入：hello回车输出：olleh\n#include &lt;stdio.h&gt;#include &lt;string.h&gt;int main()&#123;\tchar a[100];\tchar b[100];\tgets(a);\tint l=strlen(a);\tfor(int i=0;i&lt;l;i++)&#123;\t\tb[i]=a[l-i-1];\t&#125;\tputs(b);&#125;\n\na-4-删除star问题描述：现在有一串字符串（长度不超过100），规定输入的字符串中只包含字母和号。如果包含其他符号，则输出”error\\n”请编写程序，实现以下功能：除了字符串前后的号之外，将串中的其他号全部删除。输出字符串之后要输出回车再结束程序。如果输入不符合要求，则输出”error”和回车。假如输入的字符串是****ABCDEFG********,删除串中的*号之后，字符串变成****ABCDEFG********\n#include &lt;stdio.h&gt;#include &lt;string.h&gt;int main()&#123;\tchar a[100];\tgets(a);\tchar b[100];\tint l=strlen(a);\tint j=0;\tint k;\tint begin=0;\tint end=l-1;\tfor(int i=0;i&lt;l;i++)&#123;\t\tif(a[i]!=&#x27;*&#x27;&amp;&amp;a[i]&lt;&#x27;A&#x27;&amp;&amp;a[i]&gt;&#x27;z&#x27;)&#123;\t\t\tprintf(&quot;error\\n&quot;);\t\t\treturn 0;\t\t&#125;\t\tif(a[i]==&#x27;*&#x27;&amp;&amp;j==0) printf(&quot;*&quot;);\t\tif(a[i]!=&#x27;*&#x27;)&#123;\t\t\tif(j==0) begin=i;\t\t\tb[j]=a[i];\t\t\tj++;\t\t&#125;\t&#125;\t\tfor(int i=0;i&lt;j;i++)&#123;\t\tprintf(&quot;%c&quot;,b[i]);\t&#125;\tfor( ;a[end]==&#x27;*&#x27;;end--)&#123;\t\tprintf(&quot;%c&quot;,a[end]);\t&#125;\tprintf(&quot;\\n&quot;);&#125;\n","categories":["码图"],"tags":["C语言"]},{"title":"Clion的常用快捷键","url":"/2022/12/24/Clion%E7%9A%84%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/","content":"1.CLion编辑快捷键Ctrl+Spacebar 基本代码完成(任何类、方法或变量的名称)\nCtrl+Shift+Spacebar 智能代码完成(按预期类型筛选方法和变量列表)\nCtrl+Shift+Enter 完整的语句\nCtrl+P 参数信息(在方法调用参数内)\nCtrl+Q 快速查找文档\nCtrl+Mouse over code 简短的信息\nCtrl+F1 在插入符号处显示错误或警告的说明\nAlt+Insert 生成代码…(Getters, Setters, Constructors, hashCode/equals, toString)\nCtrl+O 覆盖方法\nCtrl+I 实现方法\nCtrl+Alt+T 围绕与…(如果. .其他,试试. .catch, for, synchronized等)\nCtrl+/ 注释/取消注释行注释\nCtrl+Shift+/ 注释/取消注释块注释\nCtrl+W 选择连续递增代码块\nCtrl+Shift+W 减少当前选择到以前的状态\nAlt+Q 显示强度动作和快速修复\nCtrl+Alt+L 重新格式化代码\nCtrl+Alt+O 优化进口\nCtrl+Alt+I 自动缩进线(年代)\nTab/Shift+Tab 缩进/ unindent选定的行\nCtrl+X 剪切当前行或选定块到剪贴板\nCtrl+C 复制当前行或选定块到剪贴板\nCtrl+V 从剪贴板粘贴\nCtrl+Shift+V 从最近的缓冲区粘贴…\nCtrl+D 复制当前行或选定块\nCtrl+Y 删除插入符号处的行\nCtrl+Shift+J 智能线连接\nCtrl+Enter 智能线分裂\nShift+Enter 开始新的一行\nCtrl+Shift+U 在插入符号或选定块上切换大小写\nCtrl+Shift+]/[ 选择直到代码块结束/开始\nCtrl+Delete 删除到字尾\nCtrl+Backspace 删除到单词开始\nCtrl+ NumPad +/- 展开/折叠代码块\nCtrl+Alt+ NumPad +/- 展开所有/折叠所有\nCtrl+F4 关闭活动编辑器选项卡\nAlt+Shift+Click 将插入符号放置在多个位置\nEsc 恢复单插入字符模式\nAlt+G/Alt+Shift+G 添加/删除下次出现的当前单词选择\n2.CLion查找和替换Double Shift 到处寻找\nCtrl+F 找到\nF3 / Shift+F3 查找下一个/找到之前\nCtrl+R 取代\nCtrl+Shift+F 找到的路径\nCtrl+Shift+R 在路径替换\n3.CLion编译、运行快捷键Ctrl+F9 建设项目\nAlt+Shift+F10 选择配置并运行\nAlt+Shift+F9 选择配置和调试\nShift+F10 运行\nShift+F9 调试\n4.CLion Debug快捷键F8 步进\nF7 进入\nShift+F8 步出\nAlt+F9 运行到光标\nAlt+F8 计算表达式\nF9 恢复程序\nCtrl+F8 Toggle breakpoint\nCtrl+Shift+F8 查看断点\n5.CLion Live模板快捷键Ctrl+Alt+J 使用Live模板包围\nCtrl+J 插入Live模板\nfor (索引;,)循环\niter 迭代范围(C + + 11)\nitit 使用Begin/End成员函数迭代\nincboost 在CMake中包含使用Boost的指示\nfunction 在CMake中创建新的函数定义器\n6.CLion搜索文件、导航快捷键Ctrl+N 搜索类文件\nCtrl+Shift+N 搜索文件\nCtrl+Alt+Shift+N 定位到符号\nAlt+Right Arrow/Left Arrow 转到下一个/上一个编辑器选项卡\nF12 返回到前一个工具窗口\nEsc 转到编辑器(从工具窗口)\nShift+Esc 隐藏活动的或最近活动的窗口\nCtrl+Shift+F4 关闭活动运行/信息/发现/…选项卡\nCtrl+G 去行\nCtrl+E 最近文件弹出\nCtrl+Alt+Left Arrow/Right Arrow 向后/向前导航\nCtrl+Shift+Backspace 导航到最后一次编辑位置\nAlt+F1 在任意视图中选择当前文件或符号\nCtrl+B 定位声明\nCtrl+Alt+B 搜索实现类(年代)\nCtrl+Alt+Home 转到相关符号(头/源)\nCtrl+Shift+I 文件)\nCtrl+Shift+B 开放快速定义查找\nCtrl+U 进入类型声明\nAlt+Up Arrow/Down Arrow 父类方法/超类\nCtrl+]/[ 转到前一个/下一个方法\nCtrl+F12 移动到代码块结束/移动到代码开始\nCtrl+H 弹出文件结构\nCtrl+Alt+H 类型层次结构\nF2/Shift+F2 调用层次结构\nF11 下一个/以前的错误突出显示\nCtrl+F11 切换书签\nCtrl+0…9 用助记符切换书签\nShift+F11 转到编号书签\n7.CLion常用快捷键Alt+0…9 打开相应的工具窗口\nAlt+Shift+I 用当前配置文件检查当前文件\nCtrl+` 快速开关电流方案\nCtrl+Alt+S 编辑应用程序设置\nCtrl+Shift+F12 隐藏所有工具窗口\nAlt+Shift+F 添加到收藏夹\n8.CLion 使用过的搜索Alt+F7 发现使用\nCtrl+F7 在文件中查找用法\nCtrl+Shift+F7 突出显示文件中的用法\nCtrl+Alt+F7 显示用法\n9.VCS/Git快捷键Ctrl+K 向VCS/Git提交项目\nCtrl+T 从VCS更新项目\nAlt+Shift+C 查看最近的变化\nAlt+` VCS/Git快速弹出\n10.CLion重构快捷键Ctrl+Alt+Shift+T 重构\nF5 复制\nF6 移动\nAlt+Delete 安全的删除\nShift+F6 重命名\nCtrl+F6 更改签名\nCtrl+Alt+M 提取功能\nCtrl+Alt+N 内联\nCtrl+Alt+P 引入参数\nCtrl+Alt+V 引入变量\nCtrl+Alt+C 介绍常数\nCtrl+Alt+D 介绍定义\n","tags":["C语言","Clion"]}]